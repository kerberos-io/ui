@import "app.variables";

html {
  box-sizing: border-box;
}

body {
  box-sizing: border-box;
  background: var(--bg);
  margin: 0;
  padding: 0;
  font-family: 'Inter', sans-serif; // use regular Inter font by default..
  @supports (font-variation-settings: normal) {
    font-family: 'Inter var', sans-serif; // ..but if supported, use variable Inter font instead (all-in-one)
  }
}

h1, h2, h3, h4, h5, h6 {
  font-weight: 600;
  color: var(--text);
}

p {
  font-size: 15px;
  line-height: size(2);
  color: var(--text-muted);
}
b, strong { font-weight: 500; }

a {
  text-decoration: none;
}

hr {
  border: none;
  border-top: 1px solid var(--bg-muted);
  margin: size(2) 0;
  .--padded & { margin: size(2) size(-2); } // stretch to sides when in padded .block.body
  &.--thick { border-width: 3px; }
}


// ----- UI ----- //

// blocks, cards..
// @TODO: ideally move to the component, if we can figure out how to apply styles there
.block {
  .block-header {
    .icon {
      opacity: 0.4;
    }
    h1 {
      line-height: size(3);
      font-size: 16px;
      margin: 0 0 0 size(1);
    }
  }
  .body {
    .--padded { // modifier for inner padding in block-body
      padding: size(2) size(2);
      display: block;
    }
  }
}

/*
  ----- FORMS -----

  <label>
    Label title
    <input type="text">
  </label>
*/
label {
  @extend %tfx;
  font-size: size(1);
  line-height: size(3);
  color: var(--text-light);
  text-transform: uppercase;
  cursor: pointer;
  &:hover { color: var(--text-muted); }
  &:focus-within { // if any item within <label> is focused..
    color: var(--primary); font-weight: 560; // ..colorize label's text
  }
  // Toggle buttons
  &.toggle-button {
    display: flex;
    text-transform: none;
    line-height: size(2);
    margin: size(1) 0;
    &:focus-within { font-weight: inherit; }
    SliderField {
      flex: auto;
      margin: 4px 18px 0 0;
    }
    .text {
      flex: 1 1 100%;
      color: var(--text-muted);
      strong {
        font-size: 15px;
        color: var(--text);
        display: block;
      }
      small {
        font-size: 13px;
      }
    }
  }
}
input, textarea, select {
  @extend %tfx;
  box-sizing: border-box;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  outline: none;
  width: 100%;
  padding: size(1) size(2);
  margin-bottom: 12px;
  font-size: 15px;
  color: var(--text);
  line-height: 24px;
  &[type="checkbox"] {
    width: auto;
  }
  &:not(.button) { // don't apply input status effects on buttons (ie. input[type="submit"])
    &[disabled], &[readonly] {
      color: var(--text-muted);
    }
    &:hover {
      border: 1px solid var(--text-light);
    }
    &:focus {
      border: 1px solid var(--primary);
      box-shadow: 0px 0px 0px 3px hsla(var(--primary-hsl), 0.2);
    }
  }
}


// all-caps small header | used in: table>th, sidenav section headers
.table-header {
  font-size: size(1);
  line-height: size(2);
  color: var(--text-light);
  text-transform: uppercase;
}


// "How to" link to docs (with question icon)
.howto-link {
  &:hover, &:focus {
    text-decoration: underline;
  }
  &::after {
    content: " ->";
  }
}


// ----- Layout ----- //


// Grids
.grid-container {
  --columns: 1;
  --gapH: #{size(1)};
  --gapV: 0;
  display: grid;
  column-gap: var(--gapH);
  row-gap: var(--gapV);
  grid-template-columns: repeat(var(--columns), 1fr); // "fr" and fraction of free space, ie. equal spacing
  @include break(t) { --gapH: #{size(2)}; }

  &.--two-columns {
    --gapH: #{size(2)};
    @include break(w) { --columns: 2; }
  }

  &.--four-columns {
    @include break(t) { --columns: 2; --gapV: #{size(2)}; }
    @include break(w) { --columns: 4; }
  }

} // < .grid-container


// Control bar underneath page title for search, filtering and sorting
.control-bar {
  @extend %box-shadow-bigger;
  background-color: var(--card-muted);
  margin: 0 calc(-1 * var(--main-content-gutter)) size(2); // stretch all the way to the sides
  padding: 0;
  @include break(w) {
    padding: 0 var(--main-content-gutter);
    display: flex;
  }
  .filtering, .sorting { // shared styles
    display: flex;
    flex-direction: row; // ..on larger displays, show next to each other
    flex-wrap: wrap;
    & > * {
      border-bottom: 1px solid var(--bg-muted);
      @include break-from(500px) { flex: 1 1 50%; }
      @include break-from(1000px) { flex: 1 1 33.3%; }
      @include break-from(1150px) { flex: 1 1 25%; }
      @include break(w) {
        border: 0;
      }
      @include break-from(1400px) { flex: 0 1 200px; }
    }
  }
  .filtering {
    @include break(w) { flex: 1 1; align-self: flex-start; }
    & > * {
      @include break(w) { border-right: 1px solid var(--bg-muted); }
    }
    &.row {
      & > * {
        flex: 1 1 5% !important;
      }
    }
  }
  .sorting {
    @include break(w) { flex: 0 1; align-self: center; }
    & > * {
      @include break(w) { border-left: 1px solid var(--bg-muted); }
    }
  }
}


// Item picker with sticky search and scrollable options
// e.g. camera picker
.picker-with-search {
  --list-height: 320px;
  background: var(--card);
  border: 1px solid var(--bg-muted);
  border-radius: var(--radius);
  .search { // sticky item search
    border-bottom: 1px solid var(--bg-muted);
    display: flex;
    align-items: center;
    padding: 0 0 0 size(2);
    input {
      border: none;
      margin: 0;
      box-shadow: none;
    }
    &:focus-within {
      .icon * { fill: var(--primary); }
    }
  }
  ul.items { // list of selectable items (scrollable)
    padding: size(0.5);
    margin: 0;
    list-style: none;
    font-size: 13px;
    max-height: var(--list-height);
    overflow: auto; // scrolls when overflowing
    label { // clickable item
      @extend %tfx;
      line-height: size(2);
      text-transform: none;
      display: flex;
      justify-content: flex-start;
      align-items: center;
      padding: size(0.5) size(1.5);
      margin: 2px 0;
      border-radius: var(--radius);
      cursor: pointer;
      &:hover { background: var(--card-muted); }
      &.selected {
        background: hsla(var(--primary-hsl), 0.1);
        .name, .meta { color: var(--primary); }
        &:hover { background: hsla(var(--primary-hsl), 0.15); }
      }
      .checkbox {
        width: auto;
        padding: 0;
        margin: 0;
        flex: 0;
        &[disabled] { // gray-out labels for disabled checkboxes
          & ~ .name { color: var(--text-muted); }
          & ~ .meta { color: var(--text-light); }
        }
      }
      .icon {
        margin-left: size(1.5);
      }
      .name {
        margin: 0 size(2) 0 size(1);
        flex: 1 1;
        color: var(--text);
        font-weight: 600;
      }
      .meta {
        font-weight: 400;
        color: var(--text-muted);
      }
    }
  }
}

// "not found" placeholder (e.g. Camera offline)
section.not-found {
  width: 100%;
  border: 2px dashed var(--bg-muted);
  padding: 48px 24px;
  text-align: center;
  .center {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  h1 {
    font-size: 18px;
    line-height: size(3);
    margin: 0;
  }
  p {
    font-size: 15px;
    line-height: size(2);
    color: var(--text-muted);
    margin: size(1) auto size(2);
    max-width: 33rem;
  }
}

// ----- Specific ----- //




// ----- Plug-ins ----- //

.mat-datepicker-content {
  translate: -54px 6px; // move the datepicker dropdown manually & align with the control input
}

// Address autocomplete
ngxgeo-autocomplete {
  #search_places {
    background: var(--card);
    border: 1px solid var(--bg-muted);
    padding: 14px 25px;
    outline: none;
    //width: 100%;
  }
  .custom-autocomplete__dropdown {
    @extend %modal-shadow;
    background: var(--card) !important;
    border-radius: var(--radius);
    border: none !important;
    font-weight: 400;
    ul {
      padding: 0 7px;
    }
    .currentlocation a { // "use current location" button
      box-sizing: border-box;
      padding: 6px 24px !important;
      text-transform: capitalize;
      letter-spacing: 0;
      font-size: 13px !important;
    }
    a { // selectable location item
      @extend %tfx;
      text-transform: none;
      padding: 6px 24px !important;
      box-sizing: border-box;
      line-height: 24px;
      white-space: nowrap;
      text-overflow: ellipsis;
      overflow: hidden;
      &:hover, &:focus {
        background: var(--card-muted);
      }
    }
    .main-text { // name of the place
      font-weight: 500 !important;
      font-size: 13px;
    }
    .secondary_text { // address of place
      color: var(--text-muted);
    }
    .active { // hover effect
      background-color: var(--card-muted) !important;
      color: var(--text-muted) !important;
      display: flex;
      a {
        background: transparent !important;
      }
      .secondary_text {
        color: var(--text-muted) !important;
      }
    }
  }
  .heading {
    padding: 0 0 0 24px !important;
    box-sizing: border-box;
    overflow: hidden;
    .line-recent {
      left: 170px !important;
      top: 17px !important;
      width: calc(100% - 170px) !important;
    }
    .line-location {
      left: 116px !important;
      top: 18px !important;
      width: calc(100% - 116px) !important;
    }
  }

  .custom-autocomplete__dropdown .currentlocation .location-icon,
  .custom-autocomplete__dropdown .custom-icon {
    display: none !important;
  }
}

// ----- Temp/Dev Helpers ----- //

.debug-responsivity {
  .size {
    position: fixed;
    bottom: 0;
    left: 0;
    z-index: 100;
    background: var(--text);
    color: var(--bg);
    font-size: 0.6em;
    font-weight: 600;
    padding: 0 3px;
    display: none;
  }
  .none { display: inline-block; }
  @include break(t) {
    .size { display: none; }
    .t { display: inline-block; }
  }
  @include break(d) {
    .size { display: none; }
    .d { display: inline-block; }
  }
  @include break(w) {
    .size { display: none; }
    .w { display: inline-block; }
  }
  @include break(f) {
    .size { display: none; }
    .f { display: inline-block; }
  }
}

.show-grid { // inspired by https://sassline.com
  background-image: linear-gradient(to bottom, #0ff 0px, rgba(255, 255, 255, 0) 1px);
  background-repeat: repeat-y;
  background-size: 100% size(1);
}
